<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thoughtWorks.dao.PersonDao">
    <select id="queryPersonTotalCount" resultType="long">
        SELECT count(1)
        FROM t_teacher
    </select>
    <delete id="deleteTeacherById" parameterType="string">
        DELETE FROM t_teacher
        WHERE no = #{id}
    </delete>
    <insert id="addTeacher" parameterType="Teacher">
        INSERT INTO t_teacher (no, name, department_id, direction_id, gender,dept_id,classify)
        VALUES (#{no}, #{name}, #{departmentId}, #{directionId}, #{gender},#{deptId},#{classify})
    </insert>

    <update id="updateTeacher" parameterType="Teacher">
        UPDATE t_teacher
        SET name = #{name}, department_id = #{departmentId}, direction_id = #{directionId}, gender = #{gender}
        ,dept_id=#{deptId},classify=#{classify}
        WHERE no = #{no}
    </update>
    <select id="queryStudentsByLikes" parameterType="map" resultType="map">
        SELECT student.no,student.name,student.gender,direction.name direction,profession.name profession,class.name
        classes,teacher.department_id departmentId
        FROM t_student student
        LEFT JOIN (SELECT no, department_id FROM t_teacher) teacher ON teacher.no = #{no}
        LEFT JOIN (SELECT id FROM t_department) department ON department.id = teacher.department_id
        LEFT JOIN (SELECT id, name FROM t_direction) direction ON direction.id = student.direction_id
        <if test="directionId!=''">
            AND direction.id = #{directionId}
        </if>
        LEFT JOIN (SELECT id,name FROM t_profession) profession ON profession.id = student.profession_id
        <if test="professionId!=''">
            AND profession.id=#{professionId}
        </if>
        LEFT JOIN (SELECT id, name FROM t_classes) class ON class.id = student.classes_id
        WHERE student.department_id = teacher.department_id
        and direction_id =direction.id
        AND profession.id = profession_id
        <if test="classesId!=''">
            AND student.classes_id=#{classesId}
        </if>
        AND student.no LIKE #{studentNo}
        and student.name
        LIKE #{name}
    </select>

    <select id="queryStudentList" resultType="map" parameterType="map">
        SELECT
        student.no,
        student.name,
        student.gender,
        student.level,
        student.stay_type,
        department.name department,
        profession.name profession,
        direction.name direction,
        class.name classes,
        area.name area,
        floor.name floor,
        room.name room
        FROM t_student student

        LEFT JOIN (SELECT
        id,
        name
        FROM t_department) department ON department.id = student.department_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_direction) direction ON direction.id = student.direction_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_profession) profession ON profession.id = student.profession_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_classes) class ON class.id = student.classes_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_area) area ON area.id = student.area_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_floor) floor ON floor.id = student.floor_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_room) room ON room.id = student.room_id

        WHERE department_id = department.id
        AND direction_id = direction.id
        AND profession_id = profession.id

        and student.name LIKE #{searchDto.name}
        and student.no LIKE #{searchDto.studentNo}
        and student.gender LIKE #{searchDto.sex}


        <if test=" searchDto.classesId !=''">
            and student.classes_id LIKE #{searchDto.classesId}
        </if>


        <if test=" searchDto.level != ''">
            and student.level = #{searchDto.level}
        </if>

        <if test=" searchDto.departmentId !=''">
            and student.department_id = #{searchDto.departmentId}
        </if>

        <if test=" searchDto.directionId !=''">
            and student.direction_id = #{searchDto.directionId}
        </if>

        <if test=" searchDto.TypeOfAccommodation != ''">
            and student.stay_type = #{searchDto.TypeOfAccommodation}
        </if>

        <if test=" searchDto.areaId !=''">
            <if test="searchDto.TypeOfAccommodation == 1">
                and student.area_id = #{searchDto.areaId}
            </if>
        </if>
        <if test=" searchDto.floorId !=''">
            <if test="searchDto.TypeOfAccommodation == 1">
                and student.floor_id = #{searchDto.floorId}
            </if>
        </if>
        <if test=" searchDto.roomId !=''">
            <if test="searchDto.TypeOfAccommodation == 1">
                and room.name LIKE #{searchDto.roomId}
            </if>
        </if>

        limit #{start},#{pageSize}
    </select>
    <select id="queryStudentsListCount" resultType="long">
        SELECT count(*)
        FROM t_student student
        LEFT JOIN (SELECT
        id,
        name
        FROM t_department) department ON department.id = student.department_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_direction) direction ON direction.id = student.direction_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_profession) profession ON profession.id = student.profession_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_classes) class ON class.id = student.classes_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_area) area ON area.id = student.area_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_floor) floor ON floor.id = student.floor_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_room) room ON room.id = student.room_id
        WHERE department_id = department.id
        AND direction_id = direction.id
        AND profession_id = profession.id

        and student.name LIKE #{searchDto.name}
        and student.no LIKE #{searchDto.studentNo}
        and student.gender LIKE #{searchDto.sex}
        <if test=" searchDto.classesId !=''">
            and student.classes_id LIKE #{searchDto.classesId}
        </if>

        <if test=" searchDto.departmentId !=''">
            and student.department_id = #{searchDto.departmentId}
        </if>

        <if test=" searchDto.TypeOfAccommodation != ''">
            and student.stay_type = #{searchDto.TypeOfAccommodation}
        </if>

        <if test=" searchDto.level != ''">
            and student.level = #{searchDto.level}
        </if>

        <if test=" searchDto.directionId !=''">
            and student.direction_id = #{searchDto.directionId}
        </if>


        <if test="searchDto.TypeOfAccommodation == 1">
            <if test=" searchDto.areaId !=''">
                and student.area_id = #{searchDto.areaId}
            </if>
            <if test=" searchDto.floorId !=''">
                and student.floor_id = #{searchDto.floorId}
            </if>
            <if test=" searchDto.roomId !=''">
                and room.name LIKE #{searchDto.roomId}
            </if>
        </if>

    </select>
    <select id="queryStudentsByClassesIdsAndLikeName" resultType="map">
        SELECT
        student.no,
        student.name,
        student.gender,
        student.level,
        direction.name direction,
        profession.name profession,
        class.name classes,
        department.name department,
        area.name area,
        floor.name floor,
        room.name room
        FROM t_student student

        LEFT JOIN (SELECT
        id,
        name
        FROM t_department) department ON department.id = student.department_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_direction) direction ON direction.id = student.direction_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_profession) profession ON profession.id = student.profession_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_classes) class ON class.id = student.classes_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_area) area ON area.id = student.area_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_floor) floor ON floor.id = student.floor_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_room) room ON room.id = student.room_id

        WHERE student.department_id = department.id
        AND direction_id = direction.id
        AND profession.id = profession_id

        and student.name LIKE #{searchDto.name}
        and student.no LIKE #{searchDto.studentNo}
        <if test=" searchDto.classesId !=''">
            and student.classes_id LIKE #{searchDto.classesId}
        </if>
        <if test=" searchDto.departmentId !=''">
            and student.department_id = #{searchDto.departmentId}
        </if>
        <if test=" searchDto.professionId !=''">
            and student.level = #{searchDto.professionId}
        </if>
        <if test=" searchDto.directionId !=''">
            and student.direction_id = #{searchDto.directionId}
        </if>
        <if test=" searchDto.areaId !=''">
            and student.area_id = #{searchDto.areaId}
        </if>
        <if test=" searchDto.floorId !=''">
            and student.floor_id = #{searchDto.floorId}
        </if>
        <if test=" searchDto.roomId !=''">
            and room.name LIKE #{searchDto.roomId}
        </if>
        LIMIT #{start}, #{pageSize}
    </select>
    <select id="queryStudentsCount" resultType="long">
        SELECT count(*)
        FROM t_student student
        LEFT JOIN (SELECT
        id,
        name
        FROM t_room) room ON room.id = student.room_id

        WHERE
        student.name LIKE #{searchDto.name}
        and student.no LIKE #{searchDto.studentNo}
        <if test=" searchDto.classesId !=''">
            and student.classes_id LIKE #{searchDto.classesId}
        </if>
        <if test=" searchDto.departmentId !=''">
            and student.department_id = #{searchDto.departmentId}
        </if>
        <if test=" searchDto.professionId !=''">
            and student.level = #{searchDto.professionId}
        </if>
        <if test=" searchDto.directionId !=''">
            and student.direction_id = #{searchDto.directionId}
        </if>
        <if test=" searchDto.areaId !=''">
            and student.area_id = #{searchDto.areaId}
        </if>
        <if test=" searchDto.floorId !=''">
            and student.floor_id = #{searchDto.floorId}
        </if>
        <if test=" searchDto.roomId !=''">
            and room.name LIKE #{searchDto.roomId}
        </if>
    </select>
    <select id="queryStudentByNo" parameterType="string" resultType="Student">
        SELECT *
        FROM t_student
        WHERE no = #{stuNo}
    </select>
    <select id="queryPersonList" resultType="Map">
        SELECT
            teacher.no,
            teacher.name,
            teacher.gender,
            teacher.classify,
            department.id   departmentId,
            department.name departmentName,
            direction.id    directionId,
            direction.name  directionName,
            dept.id deptId,
            dept.name deptName

        FROM t_teacher teacher
            LEFT JOIN (SELECT
                           id,
                           name
                       FROM t_department) department ON department.id = teacher.department_id
            LEFT JOIN (SELECT
                           id,
                           name
                       FROM t_direction) direction ON direction.id = teacher.direction_id
            LEFT JOIN (SELECT
                           id,
                           name
                       FROM t_dept) dept ON dept.id = teacher.dept_id
        LIMIT #{start}, #{end}
    </select>

    <select id="queryTeacherByNo" parameterType="string" resultType="map">
        SELECT *
        FROM t_teacher
        WHERE no = #{no}
    </select>
    <update id="distributedClass">
        UPDATE t_student SET classes_id = #{classesId} WHERE t_student.no IN
        <foreach collection="ids" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </update>
    <update id="distributeDirection">
        UPDATE t_student SET direction_id=#{directionId} WHERE no IN
        <foreach collection="ids" open="(" separator="," close=")" item="item">
            #{item}
        </foreach>
    </update>
    <select id="updateStudentTeacherId">
        UPDATE t_student SET teacher_id=#{teacherId} WHERE no IN
        <foreach collection="ids" open="(" separator="," close=")" item="item">
            #{item}
        </foreach>
    </select>
    <insert id="addCommunication" parameterType="CommunicationContent">
        INSERT INTO t_communication (teacher_id, student_id, talk_name, direction, content) VALUES
            (#{teacherId}, #{studentId}, #{talkName}, #{direction}, #{content})
    </insert>
    <select id="queryCommunicationByStudentId" parameterType="string" resultType="map">

        SELECT
            id,
            teacher.name teacherName,
            talk_name    talkName,
            content,
            time,
            direction
        FROM t_communication communication
            LEFT JOIN (SELECT
                           no,
                           name
                       FROM t_teacher) teacher ON teacher.no = communication.teacher_id
        WHERE communication.student_id = #{studentNo}
        ORDER BY time DESC
    </select>


    <update id="updateCommunicationContent" parameterType="CommunicationContent">
        UPDATE t_communication
        SET content = #{content}
        WHERE id = #{id}
    </update>


    <select id="queryStudentTotalCount" parameterType="map" resultType="long">
        SELECT count(*)
        FROM t_student student
        LEFT JOIN (SELECT
        id,
        name
        FROM t_room) room ON room.id = student.room_id

        WHERE
        student.name LIKE #{searchDto.name}
        and student.no LIKE #{searchDto.studentNo}
        <if test=" searchDto.classesId !=''">
            and student.classes_id LIKE #{searchDto.classesId}
        </if>
        <if test=" searchDto.departmentId !=''">
            and student.department_id = #{searchDto.departmentId}
        </if>
        <if test=" searchDto.professionId !=''">
            and student.level = #{searchDto.professionId}
        </if>
        <if test=" searchDto.directionId !=''">
            and student.direction_id = #{searchDto.directionId}
        </if>
        <if test=" searchDto.areaId !=''">
            and student.area_id = #{searchDto.areaId}
        </if>
        <if test=" searchDto.floorId !=''">
            and student.floor_id = #{searchDto.floorId}
        </if>
        <if test=" searchDto.roomId !=''">
            and room.name LIKE #{searchDto.roomId}
        </if>
    </select>


    <select id="queryAllDept" parameterType="map" resultType="map">
        select * from t_dept
        limit #{start},#{pageSize};
    </select>

    <select id="queryDeptTotalCount" resultType="long">
        select COUNT(*) from t_dept;
    </select>

    <insert id="addDept" parameterType="map">
        INSERT INTO t_dept(name)
        VALUES (#{name})
    </insert>

    <update id="updateDept" parameterType="map">
        UPDATE t_dept
        SET name = #{name}
        WHERE id = #{id}
    </update>

    <delete id="deleteDept" parameterType="string">
        DELETE FROM t_dept
        WHERE id = #{id}
    </delete>

    <select id="queryUserById" resultType="Teacher" parameterType="string">
        SELECT * from t_teacher
        WHERE no=#{no}
    </select>
    <select id="queryDirectionByDepartmentId" resultType="Direction" parameterType="int">
        select * from t_direction
        WHERE  department_id = #{departmentId}
    </select>
    <select id="queryDirectionByDepartment" resultType="Direction">
        select * from t_direction
    </select>
    <select id="queryClass" resultType="Classes">
        select * from t_classes
    </select>
    <select id="queryClassByDepartmentId" resultType="Classes" parameterType="int">
        select * from t_classes
        WHERE  department_id = #{departmentId}
    </select>

    <select id="queryStudentInfoById" resultType="map" parameterType="String">
        SELECT
  student.no,
  student.name,
  student.gender,
  student.native_place,
  student.idcard,
  student.level,
  student.political_status,
  department.name department,
  direction.name direction,
  profession.name profession
FROM t_student student
 LEFT JOIN (SELECT
        id,
        name
        FROM t_department) department ON department.id = student.department_id

  LEFT JOIN (SELECT
               id,
               name
             FROM t_direction) direction ON direction.id = student.direction_id

  LEFT JOIN (SELECT
               id,
               name
             FROM t_profession) profession ON profession.id = student.profession_id


WHERE direction_id = direction.id
      AND profession.id = profession_id
      AND student.no=#{studentNo}
    </select>

    <select id="updateByStudentNo" parameterType="String" resultType="map">
        SELECT
          student.*,
          direction.name direction,
          profession.name profession,
          class.name classes,
          department.name department,
          area.name area,
          floor.name floor,
          room.name room

        FROM t_student student

          LEFT JOIN (SELECT
                       id,
                       name
                     FROM t_department) department ON department.id = student.department_id
          LEFT JOIN (SELECT
                       id,
                       name
                     FROM t_direction) direction ON direction.id = student.direction_id

          LEFT JOIN (SELECT
                       id,
                       name
                     FROM t_profession) profession ON profession.id = student.profession_id

          LEFT JOIN (SELECT
                       id,
                       name
                     FROM t_classes) class ON class.id = student.classes_id

          LEFT JOIN (SELECT
                       id,
                       name
                     FROM t_area) area ON area.id = student.area_id
          LEFT JOIN (SELECT
                       id,
                       name
                     FROM t_floor) floor ON floor.id = student.floor_id
          LEFT JOIN (SELECT
                       id,
                       name
                     FROM t_room) room ON room.id = student.room_id

        WHERE student.department_id = department.id
              AND direction_id = direction.id
              AND profession.id = profession_id
              and student.no =#{studentNo}

    </select>
    <select id="updateFamilyByStudentNo" parameterType="String" resultType="map">
        SELECT
          family.*
        FROM t_student_family family
        WHERE  family.no =#{studentNo}
    </select>
    <select id="updateExperienceByStudentNo" parameterType="String" resultType="map">
        SELECT
          experience.*
        FROM t_student_experience experience
        WHERE  experience.no =#{studentNo}

    </select>

    <select id="queryStudentsToUpdate" parameterType="string" resultType="map">
        select * from t_student
            WHERE t_student.no = #{studentNo}
    </select>
    <select id="queryStudentFamily" parameterType="string" resultType="map">
        select * from t_student_family
        WHERE t_student_family.no = #{studentNo}
    </select>
    <select id="queryStudentsProfessionList" resultType="map">
        select * from t_profession
    </select>
    <select id="queryStudentsDirection" resultType="map">
        select * from t_direction
    </select>
    <select id="queryStudentsClassList" resultType="map">
        select * from t_classes
    </select>
    <select id="queryStudentExperienceList" resultType="map">
        select * from t_student_experience
    </select>

    <insert id="insertCommunityTeacher">
        INSERT t_teacher_community (no,area_id,floor_id) VALUES
        <foreach collection="floorId" item="item" index="index" separator=",">
            (#{no},#{areaId},#{item})
        </foreach>
    </insert>

    <select id="queryTeacherCommunity" resultType="map">
        select * from t_teacher_community

         where no=#{no}
    </select>
    <select id="teacherCommunity" resultType="map">
        select area_id from t_teacher_community

        where no=#{no}
    </select>
    <select id="teacherCommunity_floors" resultType="map">
        select floor_id from t_teacher_community

        where no=#{no}
    </select>
    <select id="queryTeacherList" resultType="map">
        select * from t_teacher
    </select>
    <update id="updateStudentList" parameterType="com.thoughtWorks.entity.StudentUpdate">
        UPDATE t_student
        <set>
            <if test="classes_id != null and classes_id !=''">
                t_student.classes_id = #{classes_id},
            </if>
            <if test="profession_id != null and profession_id !=''">
                t_student.profession_id = #{profession_id},
            </if>
            <if test="origin_profession_id != null and origin_profession_id !=''">
                t_student.origin_profession_id = #{origin_profession_id},
            </if>
            <if test="direction_id != null and direction_id !=''">
                t_student.direction_id = #{direction_id},
            </if>
            <if test="head_image != null and head_image !=''">
                t_student.head_image = #{head_image},
            </if>

            <if test="health_status != null and health_status !=''">
                t_student.health_status = #{health_status},
            </if>
            <if test="student_type != null and student_type !=''">
                t_student.student_type = #{student_type},
            </if>
            <if test="stay_type != null and stay_type !=''">
                t_student.stay_type = #{stay_type},
            </if>
            <if test="in_school != null and in_school !=''">
                t_student.in_school = #{in_school},
            </if>
            <if test="graduate_school != null and graduate_school !=''">
                t_student.graduate_school = #{graduate_school},
            </if>
            <if test="blood != null and blood !=''">
                t_student.blood = #{blood},
            </if>
            <if test="height != null and height !=''">
                t_student.height = #{height},
            </if>
            <if test="is_marry != null and is_marry !=''">
                t_student.is_marry = #{is_marry},
            </if>
            <if test="weight != null and weight !=''">
                t_student.weight = #{weight},
            </if>
            <if test="political_status != null and political_status !=''">
                t_student.political_status = #{political_status},
            </if>
            <if test="pre_school_education != null and pre_school_education !=''">
                t_student.pre_school_education = #{pre_school_education},
            </if>
            <if test="student_classify != null and student_classify !=''">
                t_student.student_classify = #{student_classify},
            </if>
            <if test="idcard_address != null and idcard_address !=''">
                t_student.idcard_address = #{idcard_address},
            </if>
            <if test="actual_address != null and actual_address !=''">
                t_student.actual_address = #{actual_address},
            </if>
            <if test="origin_address != null and origin_address !=''">
                t_student.origin_address = #{origin_address},
            </if>
            <if test="family_phone != null and family_phone !=''">
                t_student.family_phone = #{family_phone},
            </if>
            <if test="family_zip_code != null and family_zip_code !=''">
                t_student.family_zip_code = #{family_zip_code},
            </if>
            <if test="student_contact_method != null and student_contact_method !=''">
                t_student.student_contact_method = #{student_contact_method},
            </if>
            <if test="emergency_contact_name != null and emergency_contact_name !=''">
                t_student.emergency_contact_name = #{emergency_contact_name},
            </if>
            <if test="emergency_contact_method != null and emergency_contact_method !=''">
                t_student.emergency_contact_method = #{emergency_contact_method},
            </if>
            <if test="account_in != null and account_in !=''">
                t_student.account_in = #{account_in},
            </if>
            <if test="email != null and email !=''">
                t_student.email = #{email},
            </if>
            <if test="qq != null and qq !=''">
                t_student.qq = #{qq},
            </if>
            <if test="area_origin_name != null and area_origin_name !=''">
                t_student.area_origin_name = #{area_origin_name},
            </if>
            <if test="sat_score != null and sat_score !=''">
                t_student.sat_score = #{sat_score},
            </if>
            <if test="pre_school_file_where_location != null and pre_school_file_where_location !=''">
                t_student.pre_school_file_where_location = #{pre_school_file_where_location},
            </if>
            <if test="file_in != null and file_in !=''">
                t_student.file_in = #{file_in},
            </if>
            <if test="pre_school_name != null and pre_school_name !=''">
                t_student.pre_school_name = #{pre_school_name},
            </if>
            <if test="pre_school_account_where_station != null and pre_school_account_where_station !=''">
                t_student.pre_school_account_where_station = #{pre_school_account_where_station},
            </if>
            <if test="pre_school_work != null and pre_school_work !=''">
                t_student.pre_school_work = #{pre_school_work},
            </if>
            <if test="pre_school_staff != null and pre_school_staff !=''">
                t_student.pre_school_staff = #{pre_school_staff},
            </if>
            <if test="own_experience != null and own_experience !=''">
                t_student.own_experience = #{own_experience},
            </if>
            <if test="own_punishment != null and own_punishment !=''">
                t_student.own_punishment = #{own_punishment},
            </if>
            <if test="student_status != null and student_status !=''">
                t_student.student_status = #{student_status},
            </if>
            <if test="payment_status_first_year != null and payment_status_first_year !=''">
                t_student.payment_status_first_year = #{payment_status_first_year},
            </if>
            <if test="arrears_first_year != null and arrears_first_year !=''">
                t_student.arrears_first_year = #{arrears_first_year},
            </if>
            <if test="payment_status_second_year != null and payment_status_second_year !=''">
                t_student.payment_status_second_year = #{payment_status_second_year},
            </if>
            <if test="arrears_second_year != null and arrears_second_year !=''">
                t_student.arrears_second_year = #{arrears_second_year},
            </if>
            <if test="payment_status_third_year != null and payment_status_third_year !=''">
                t_student.payment_status_third_year = #{payment_status_third_year},
            </if>
            <if test="arrears_third_year != null and arrears_third_year !=''">
                t_student.arrears_third_year = #{arrears_third_year},
            </if>
            <if test="practice_learning_type != null and practice_learning_type !=''">
                t_student.practice_learning_type = #{practice_learning_type},
            </if>
            <if test="off_school_stay_address != null and off_school_stay_address !=''">
                t_student.off_school_stay_address = #{off_school_stay_address},
            </if>
            <if test="area_id != null and area_id !=''">
                t_student.area_id = #{area_id},
            </if>
            <if test="floor_id != null and floor_id !=''">
                t_student.floor_id = #{floor_id},
            </if>
            <if test="room_id != null and room_id !=''">
                t_student.room_id = #{room_id},
            </if>
            <if test="counselor_id != null and counselor_id !=''">
                t_student.counselor_id = #{counselor_id},
            </if>
            <if test="is_out != null and is_out !=''">
                t_student.is_out = #{is_out},
            </if>
            <if test="religion != null and religion !=''">
                t_student.religion = #{religion},
            </if>
            <if test="hard_type != null and hard_type !=''">
                t_student.hard_type = #{hard_type},
            </if>
            <if test="teacher_id != null and teacher_id !=''">
                t_student.teacher_id = #{teacher_id},
            </if>
            <if test="community_teacher_id != null and community_teacher_id !=''">
                t_student.community_teacher_id = #{community_teacher_id}
            </if>
        </set>
        WHERE t_student.no = #{no}
    </update>

    <!--<update id="updateExperienceList" parameterType="map">
        &lt;!&ndash; update t_student_experience experience
         <foreach collection="educational_experience_start_list" item="item" index="index" open="" close="" separator=",">
             <set>
                 experience.start_time = ${item.educational_experience_start_list}
             </set>
             where no = ${item.studentNo}
         </foreach>
         <foreach collection="educational_experience_end_list" item="item" index="index" open="" close="" separator=",">
             <set>
                 experience.end_time = ${item.educational_experience_end_list}
             </set>
             where no = ${item.studentNo}
         </foreach>
         <foreach collection="update_schoolName_list" item="item" index="index" open="" close="" separator=",">
             <set>
                 experience.work_place = ${item.update_schoolName_list}
             </set>
             where no = ${item.studentNo}
         </foreach>
         <foreach collection="update_duties_start_list" item="item" index="index" open="" close="" separator=",">
             <set>
                 experience.staff = ${item.update_duties_start_list}
             </set>
             where no = ${item.studentNo}
         </foreach>&ndash;&gt;


        &lt;!&ndash;  <foreach collection="experience.keys" index="index"  item="item" separator="union">
              update t_student_experience experience
              where  no = #{item}
              and OWNER_ID in
              <foreach collection="item"  item="id" separator="," open="(" close=")">
                  #{id}
              </foreach>
          </foreach>&ndash;&gt;

&lt;!&ndash;        UPDATE t_student_experience experience
        WHERE id IN
        <set>
            <foreach collection="experiences" item="item" index="index" open="" close="" separator=",">
                #{item.experienceIds}
                start_time = #{item.educational_experience_start_list},
                end_time = #{item.educational_experience_end_list},
                work_place = #{item.update_schoolName_list},
                staff = #{item.update_duties_start_list}
                &lt;!&ndash; <where>
                     id = #{item.experienceIds}
                     AND no = #{no}
                 </where>&ndash;&gt;
            </foreach>
        </set>
        AND NO = #{no}&ndash;&gt;

        <foreach collection="experiences" item="item" index="index" open="" close="" separator=",">

        </foreach>
    </update>-->
</mapper>