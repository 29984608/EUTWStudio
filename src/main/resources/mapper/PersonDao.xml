<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thoughtWorks.dao.PersonDao">
    <select id="queryPersonTotalCount" resultType="long">
        SELECT count(1)
        FROM t_teacher
    </select>
    <delete id="deleteTeacherById" parameterType="string">
        DELETE FROM t_teacher
        WHERE no = #{id}
    </delete>
    <insert id="addTeacher" parameterType="Teacher">
        INSERT INTO t_teacher (no, name, department_id, direction_id, gender,dept_id,classify)
        VALUES (#{no}, #{name}, #{departmentId}, #{directionId}, #{gender},#{deptId},#{classify})
    </insert>

    <update id="updateTeacher" parameterType="Teacher">
        UPDATE t_teacher
        SET name = #{name}, department_id = #{departmentId}, direction_id = #{directionId}, gender = #{gender}
        ,dept_id=#{deptId},classify=#{classify}
        WHERE no = #{no}
    </update>
    <select id="queryStudentsByLikes" parameterType="map" resultType="map">
        SELECT student.no,student.name,student.gender,direction.name direction,profession.name profession,class.name
        classes,teacher.department_id departmentId
        FROM t_student student
        LEFT JOIN (SELECT no, department_id FROM t_teacher) teacher ON teacher.no = #{no}
        LEFT JOIN (SELECT id FROM t_department) department ON department.id = teacher.department_id
        LEFT JOIN (SELECT id, name FROM t_direction) direction ON direction.id = student.direction_id
        <if test="directionId!=''">
            AND direction.id = #{directionId}
        </if>
        LEFT JOIN (SELECT id,name FROM t_profession) profession ON profession.id = student.profession_id
        <if test="professionId!=''">
            AND profession.id=#{professionId}
        </if>
        LEFT JOIN (SELECT id, name FROM t_classes) class ON class.id = student.classes_id
        WHERE student.department_id = teacher.department_id
        and direction_id =direction.id
        AND profession.id = profession_id
        <if test="classesId!=''">
            AND student.classes_id=#{classesId}
        </if>
        AND student.no LIKE #{studentNo}
        and student.name
        LIKE #{name}
    </select>
    <select id="queryStudentsByClassesIdsAndLikeName" resultType="map">
        SELECT
        student.no,
        student.name,
        student.gender,
        student.level,
        direction.name direction,
        profession.name profession,
        class.name classes,
        department.name department,
        area.name area,
        floor.name floor,
        room.name room
        FROM t_student student

        LEFT JOIN (SELECT
        id,
        name
        FROM t_department) department ON department.id = student.department_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_direction) direction ON direction.id = student.direction_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_profession) profession ON profession.id = student.profession_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_classes) class ON class.id = student.classes_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_area) area ON area.id = student.area_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_floor) floor ON floor.id = student.floor_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_room) room ON room.id = student.room_id

        WHERE student.department_id = department.id
        AND direction_id = direction.id
        AND profession.id = profession_id

        and student.name LIKE #{searchDto.name}
        and student.no LIKE #{searchDto.studentNo}
        <if test=" searchDto.classesId !=''">
            and student.classes_id LIKE #{searchDto.classesId}
        </if>
        <if test=" searchDto.departmentId !=''">
            and student.department_id = #{searchDto.departmentId}
        </if>
        <if test=" searchDto.professionId !=''">
            and student.level = #{searchDto.professionId}
        </if>
        <if test=" searchDto.directionId !=''">
            and student.direction_id = #{searchDto.directionId}
        </if>
        <if test=" searchDto.areaId !=''">
            and student.area_id = #{searchDto.areaId}
        </if>
        <if test=" searchDto.floorId !=''">
            and student.floor_id = #{searchDto.floorId}
        </if>
        <if test=" searchDto.roomId !=''">
            and room.name LIKE #{searchDto.roomId}
        </if>
        LIMIT #{start}, #{pageSize}
    </select>
    <select id="queryStudentsCount" resultType="long">
        SELECT count(*)
        FROM t_student student
        LEFT JOIN (SELECT
        id,
        name
        FROM t_room) room ON room.id = student.room_id

        WHERE
        student.name LIKE #{searchDto.name}
        and student.no LIKE #{searchDto.studentNo}
        <if test=" searchDto.classesId !=''">
            and student.classes_id LIKE #{searchDto.classesId}
        </if>
        <if test=" searchDto.departmentId !=''">
            and student.department_id = #{searchDto.departmentId}
        </if>
        <if test=" searchDto.professionId !=''">
            and student.level = #{searchDto.professionId}
        </if>
        <if test=" searchDto.directionId !=''">
            and student.direction_id = #{searchDto.directionId}
        </if>
        <if test=" searchDto.areaId !=''">
            and student.area_id = #{searchDto.areaId}
        </if>
        <if test=" searchDto.floorId !=''">
            and student.floor_id = #{searchDto.floorId}
        </if>
        <if test=" searchDto.roomId !=''">
            and room.name LIKE #{searchDto.roomId}
        </if>
    </select>
    <select id="queryStudentByNo" parameterType="string" resultType="Student">
        SELECT *
        FROM t_student
        WHERE no = #{stuNo}
    </select>
    <select id="queryPersonList" resultType="Map">
        SELECT
            teacher.no,
            teacher.name,
            teacher.gender,
            teacher.classify,
            department.id   departmentId,
            department.name departmentName,
            direction.id    directionId,
            direction.name  directionName,
            dept.id deptId,
            dept.name deptName

        FROM t_teacher teacher
            LEFT JOIN (SELECT
                           id,
                           name
                       FROM t_department) department ON department.id = teacher.department_id
            LEFT JOIN (SELECT
                           id,
                           name
                       FROM t_direction) direction ON direction.id = teacher.direction_id
            LEFT JOIN (SELECT
                           id,
                           name
                       FROM t_dept) dept ON dept.id = teacher.dept_id
        LIMIT #{start}, #{end}
    </select>

    <select id="queryTeacherByNo" parameterType="string" resultType="map">
        SELECT *
        FROM t_teacher
        WHERE no = #{no}
    </select>
    <update id="distributedClass">
        UPDATE t_student SET classes_id = #{classesId} WHERE t_student.no IN
        <foreach collection="ids" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </update>
    <update id="distributeDirection">
        UPDATE t_student SET direction_id=#{directionId} WHERE no IN
        <foreach collection="ids" open="(" separator="," close=")" item="item">
            #{item}
        </foreach>
    </update>
    <insert id="addCommunication" parameterType="CommunicationContent">
        INSERT INTO t_communication (teacher_id, student_id, talk_name, direction, content) VALUES
            (#{teacherId}, #{studentId}, #{talkName}, #{direction}, #{content})
    </insert>
    <select id="queryCommunicationByStudentId" parameterType="string" resultType="map">

        SELECT
            id,
            teacher.name teacherName,
            talk_name    talkName,
            content,
            time,
            direction
        FROM t_communication communication
            LEFT JOIN (SELECT
                           no,
                           name
                       FROM t_teacher) teacher ON teacher.no = communication.teacher_id
        WHERE communication.student_id = #{studentNo}
        ORDER BY time DESC
    </select>


    <update id="updateCommunicationContent" parameterType="CommunicationContent">
        UPDATE t_communication
        SET content = #{content}
        WHERE id = #{id}
    </update>

    <select id="queryStudents" resultType="map">
        SELECT *
        FROM tttttt;
    </select>

    <select id="queryStudentTotalCount" parameterType="map" resultType="long">
        SELECT count(*)
        FROM t_student student
        LEFT JOIN (SELECT
        id,
        name
        FROM t_room) room ON room.id = student.room_id

        WHERE
        student.name LIKE #{searchDto.name}
        and student.no LIKE #{searchDto.studentNo}
        <if test=" searchDto.classesId !=''">
            and student.classes_id LIKE #{searchDto.classesId}
        </if>
        <if test=" searchDto.departmentId !=''">
            and student.department_id = #{searchDto.departmentId}
        </if>
        <if test=" searchDto.professionId !=''">
            and student.level = #{searchDto.professionId}
        </if>
        <if test=" searchDto.directionId !=''">
            and student.direction_id = #{searchDto.directionId}
        </if>
        <if test=" searchDto.areaId !=''">
            and student.area_id = #{searchDto.areaId}
        </if>
        <if test=" searchDto.floorId !=''">
            and student.floor_id = #{searchDto.floorId}
        </if>
        <if test=" searchDto.roomId !=''">
            and room.name LIKE #{searchDto.roomId}
        </if>
    </select>

    <select id="queryStudentList" resultType="map">
        SELECT
        student.no,
        student.name,
        student.gender,
        student.level,
        direction.name direction,
        profession.name profession,
        class.name classes,
        department.name department,
        area.name area,
        floor.name floor,
        room.name room
        FROM t_student student

        LEFT JOIN (SELECT
        id,
        name
        FROM t_department) department ON department.id = student.department_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_direction) direction ON direction.id = student.direction_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_profession) profession ON profession.id = student.profession_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_classes) class ON class.id = student.classes_id

        LEFT JOIN (SELECT
        id,
        name
        FROM t_area) area ON area.id = student.area_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_floor) floor ON floor.id = student.floor_id
        LEFT JOIN (SELECT
        id,
        name
        FROM t_room) room ON room.id = student.room_id

        WHERE student.department_id = department.id
        AND direction_id = direction.id
        AND profession.id = profession_id

        and student.name LIKE #{searchDto.name}
        and student.no LIKE #{searchDto.studentNo}
        <if test=" searchDto.classesId !=''">
            and student.classes_id LIKE #{searchDto.classesId}
        </if>
        <if test=" searchDto.departmentId !=''">
            and student.department_id = #{searchDto.departmentId}
        </if>
        <if test=" searchDto.professionId !=''">
            and student.level = #{searchDto.professionId}
        </if>
        <if test=" searchDto.directionId !=''">
            and student.direction_id = #{searchDto.directionId}
        </if>
        <if test=" searchDto.areaId !=''">
            and student.area_id = #{searchDto.areaId}
        </if>
        <if test=" searchDto.floorId !=''">
            and student.floor_id = #{searchDto.floorId}
        </if>
        <if test=" searchDto.roomId !=''">
            and room.name LIKE #{searchDto.roomId}
        </if>
        LIMIT #{start}, #{pageSize}

    </select>

    <select id="queryAllDept" parameterType="map" resultType="map">
        select * from t_dept
        limit #{start},#{pageSize};
    </select>

    <select id="queryDeptTotalCount" resultType="long">
        select COUNT(*) from t_dept;
    </select>

    <insert id="addDept" parameterType="map">
        INSERT INTO t_dept(name)
        VALUES (#{name})
    </insert>

    <update id="updateDept" parameterType="map">
        UPDATE t_dept
        SET name = #{name}
        WHERE id = #{id}
    </update>

    <delete id="deleteDept" parameterType="string">
        DELETE FROM t_dept
        WHERE id = #{id}
    </delete>

    <select id="queryUserById" resultType="Teacher" parameterType="string">
        SELECT * from t_teacher
        WHERE no=#{no}
    </select>
    <select id="queryDirectionByDepartmentId" resultType="Direction" parameterType="int">
        select * from t_direction
        WHERE  department_id = #{departmentId}
    </select>
    <select id="queryDirectionByDepartment" resultType="Direction" >
        select * from t_direction
    </select>
    <select id="queryClass" resultType="Classes" >
        select * from t_classes
    </select>
    <select id="queryClassByDepartmentId" resultType="Classes" parameterType="int">
        select * from t_classes
        WHERE  department_id = #{departmentId}
    </select>

    <select id="queryStudentInfoById" resultType="map" parameterType="String">
        SELECT
  student.no,
  student.name,
  student.gender,
  student.native_place,
  student.idcard,
  student.political_status,
  direction.name direction,
  profession.name profession
FROM t_student student
  LEFT JOIN (SELECT
               id,
               name
             FROM t_direction) direction ON direction.id = student.direction_id

  LEFT JOIN (SELECT
               id,
               name
             FROM t_profession) profession ON profession.id = student.profession_id


WHERE direction_id = direction.id
      AND profession.id = profession_id
      AND student.no=#{studentNo}
    </select>
</mapper>